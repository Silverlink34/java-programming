--NOTES--
-Basic Program Syntax-
public class program-name {
	optional variable delcarations and subroutines		----optional
	public static void main(String[] args) {		----the main class, called by the java interpreter
		statements go here				----commands go here
	}
	optional variable declarations and subroutines		----optional
}

--Commenting--
//		--comments are allowed till end of line, example:
codecodecode // comments are here
/* to */		--comments are allowed from /* to */		--not limited to end of lines

--Classes--
All Java programming is done inside classes. The program's name is a class.

To define a program, you need a subroutine called "main". The definition looks like this:

public static void main(String[] args) {
[statements]
}
This is what is called by the interpreter. It can call other classes and subroutines, but it is essentially the start line for executing.
public means the routine can be called from outside the program, in this case being the Java interpreter itself.

The name of the first line is the name of the program, and the code has to be saved in programname.java. 
When the programname.java is compiled, it produces programname.class. This is the program translated into Java Bytecode.

The .java file is source code, it isn't needed to run the program. The .class file is the finalized file that is ran by the interpreter.

--Layout--
Layout isn't needed for the computer to read the code. You could technically have the code all on one line.
Layout is needed for humans to read the code. You want it to be readable and look pretty.

--Identifiers--
Can be used to name classes, variables, and subroutines.
A sequence of one or more characters. Must beegin with a letter or underscore and consist entirely of letters, digits, and underscores. NO SPACES.
Identifiers are CASE SENSITIVE.
Reserved identifiers are:
class, public, static,if, else, while and more.
--Style of identifiers
Classes - start with uppercase letters
variables and subroutines - start with lowercase
Typically Java programmers dont use underscores, unless its a certain kind of variable.
It is normal to capitalize each word in name, such as HelloWorld or interestRate. AKA Camel Case.
-Compound names - AKA qualified names - names separated by periods.
these names show the path to an item through one or more levels of containment. Example:
system.out.println		--indicates system contains out and out contains println.

--Variables--
The ONLY way to get data into a variable is an assignment statement. Example:
variable = string;
--Types of variables
Java has specific types of variables for specific data: (AKA strongly typed)
-Integer Variables
byte- represents 1 byte (8bits), can contain integers -128 to 127.
short- represents 2 bytes(16bits), integers -32768 to 32767. 
int- represents 4 bytes(32bits), integers -2147483648 to 2147483647. This is the preferred integer variable type.
long- represents 8 bytes(64bits), integers -9223372036854775808 to 9223372036854775807.
-Real Numbers like 32.4
float- represents 4 bytes, can store about 7 significant digits, anything larger needs to be rounded off to work.
double- represents 8 bytes, can store about 15 significant digits. This is the preferred real number variable type.

char- single character from Unicode character set. Can also be a special character such as carriage return or newline. Uses 2 bytes in memory and can be used like integers in some situations.
boolean- true or false

--Literals in variables
literals are "literal" characters specified. They are defined by single quotes. For example setting * as a char variable: (normally it would be a multiplication operator without the single quotes)
ch = '*';
-Special literals
use a backslash along with the single quotes. Examples:
'\t'	-tab	'\r'	-carriage return	'\n'	-linefeed	'\''	-a literal single quote (single quote, backslash,single quote, single quote)	'\\'	-a literal backslash
-Numeric literals
exponential form:
'1.3e12'	--1.3 times 10 to the power of 12
'1.3e-12'	--1.3 times 10 to the power of -12
-Any numerical literal with decimal or exponent is a double type. to make a literal float, you need to append F or f to the end of number.
You cannot assign a double value to a float value.
-A literal long variable can be assigned by adding L as a suffix. Example:
17L or 72847687436L.
-Octal and Hexadecimal literals are allowed as well.
Octal uses digits 0 -7. They are represented by beginning a number with 0.
Hexadecimal uses digits 0 - 9, and letters A B C D E F. Not case sensitive. Letters represent numbers 10 - 15. Hex variables begin with 0x or 0X.
Binary literals begin with 0b or 0B and contain only digits 1 or 0.
-In Java 7 underscores can be used to separate groups of digits, such as 7_000_000_000.
-Boolean variable literals are only true or false. They are values.
Boolean values can also be assigned to variables of type boolean. Example: both assignment statements are legal.
test = true;
test = rate > 0.05;

--Strings and String Literals
Strings have to be enclosed in double quotes. An empty string is just two double quotes with nothing in between them.
--NOTE--
double quotes are used for string literals, and single quotes for char literals.
A backslash can escape special characters in a string literal.
The following string is an example of this: I said, "Are you listening!"
"I said, \"Are you listening!\""

--Variables in Programs
Variables must be declared to be used. This is done with a variable declaration statement.
The syntax is:
variabletype variableNameOrNames
int numberOfStudents;
String name;
double x, y;
boolean isFinished;
char firstInitial, middleInitial, lastInitial;
-Style note-
It is good practice to only assign one variable in each statement, unless they are closely related.
Also it helps to comment the statements on their lines.

Variables declared in a subroutine are called local variables for that subroutine. The variable needs to be declared before it is used.
-Style Note-
You can declare important variables at beggining of subroutine and comment. Use "utility variables" which are not important to overall logic of subroutine at the point they are first used.

A basic program example with variable declarations:

/**
* This class implements a simple program that
* will compute the amount of interest that is
* earned on $17,000 invested at an interest
* rate of 0.027 for one year. The interest and
* the value of the investment after one year are
* printed to standard output.
*/
public class Interest {
public static void main(String[] args) {
/* Declare the variables. */
double principal; // The value of the investment.
double rate; // The annual interest rate.
double interest; // Interest earned in one year.
/* Do the computations. */
principal = 17000;
rate = 0.027;
interest = principal * rate; // Compute the interest.
principal = principal + interest;
// Compute value of investment after one year, with interest.
// (Note: The new value replaces the old value of principal.)
/* Output the results. */
System.out.print("The interest earned is $");
System.out.println(interest);
System.out.print("The value of the investment after one year is $");
System.out.println(principal);
} // end of main()
} // end of class Interest

Explanation of subroutines:
system.out.print - prints information in the parenthesis and does NOT produce a linefeed after
system.out.println - prints  information in parenthesis and prints a linefeed after

So, The output would look like:
The interest earned is $(interest) -- interest is on same line because of system.out.print.

These are subroutine call statements. The parameters are enclosed in parenthesis. If a subroutine call statement has no parameters, it needs empty parenthesis.

--Strings, Classes, Objects and Subroutines
Values of strings are actually objects.
-Subroutines
Subroutines are contained in either a class or an object.
String values have built in subroutines that are used to manipulate the value.

-Subroutines in Classes
One of the purposes of a class is to group together some variables and subroutines, which are contained in that class.
These variables and subroutines are called static members. The main() routine is a static member of the class.
The word static marks a static member.

When a class contains a static variable or subroutine, the name of the class is part of the full name of the variable or subroutine. Example:
Class is called System. System contains a subroutine caled Exit. Exit expects an integer for a parameter. To use system's subroutine, you use a period:
System.exit(0);
This will terminate the program and shut down the Java Virtual Machine. Parameter 0 means a clean, normal exit. Any other number can be used to identify an error for closing.

Another example of a class is Math. Math has variables Math.PI and Math.E (value of PI and e). Math also has several functions. 
A function is a subroutine that is used to return a value that is used by the program somehow.

Functions will return a value, but an action needs to be specified to tell the program what to do with the value. For example, this function will find the square root of x:
Math.sqrt(x);

But it needs to be used by the program to do anything. The following shows examples of what to do with the math function:
System.out.print( Math.sqrt(x) ); // Display the square root of x.
lengthOfSide = Math.sqrt(x); //Store square root inside of a variable.

System.currentTimeMillis() will record the current time in milliseconds since a standardized base time. It is used to see how long a program runs.
You can use it at the beginning and end of a task and subtract the difference.

Here is an example program that does some mathematical computations and then displays how long it took to do it.

/**
* This program performs some mathematical computations and displays the
* results. It also displays the value of the constant Math.PI. It then
* reports the number of seconds that the computer spent on this task.
*/
public class TimedComputation {
public static void main(String[] args) {
long startTime; // Starting time of program, in milliseconds.
long endTime; // Time when computations are done, in milliseconds.
double time; // Time difference, in seconds.
startTime = System.currentTimeMillis();
double width, height, hypotenuse; // sides of a triangle
width = 42.0;
height = 17.0;
hypotenuse = Math.sqrt( width*width + height*height );
System.out.print("A triangle with sides 42 and 17 has hypotenuse ");
System.out.println(hypotenuse);
System.out.println("\nMathematically, sin(x)*sin(x) + "
+ "cos(x)*cos(x) - 1 should be 0.");
System.out.println("Let’s check this for x = 1:");
System.out.print(" sin(1)*sin(1) + cos(1)*cos(1) - 1 is ");
System.out.println( Math.sin(1)*Math.sin(1)
+ Math.cos(1)*Math.cos(1) - 1 );
System.out.println("(There can be round-off errors when"
+ " computing with real numbers!)");
System.out.print("\nHere is a random number: ");
System.out.println( Math.random() );
System.out.print("The value of Math.PI is ");
System.out.println( Math.PI );
endTime = System.currentTimeMillis();
time = (endTime - startTime) / 1000.0;
System.out.print("\nRun time in seconds was: ");
System.out.println(time);
} // end main()
} // end class TimedComputation